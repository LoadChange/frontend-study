{"version":3,"sources":["logo.png","components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_year","launch_success","rocket","className","classNames","format","to","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","item","key","LAUNCH_QUERY","Launch","props","match","params","variables","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fac3b25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7dab9996.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_year, launch_date_local, launch_success, rocket },\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success,\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport LaunchItem from './LaunchItem';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default function Launches() {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      {data.launches.map(item => (\n        <LaunchItem key={item.flight_number} launch={item} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchesQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default function Launch(props) {\n  const { flight_number } = props.match.params;\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number: +flight_number },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  const {\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">\n        <span className=\"text-dark\">Mission: </span>\n        {mission_name}\n      </h1>\n      <h4 className=\"mb-3\">Launch Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n        <li className=\"list-group-item\">Flight Year: {launch_year}</li>\n        <li className=\"list-group-item\">\n          Launch Successful:{' '}\n          <span\n            className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success,\n            })}\n          >\n            {launch_success ? 'Yes' : 'No'}\n          </span>{' '}\n        </li>\n        <li className=\"list-group-item\">Flight Year: {launch_year}</li>\n      </ul>\n      <h4 className=\"my-3\">Rocket Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n      </ul>\n      <hr/>\n      <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n    </div>\n  );\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport logo from './logo.png';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}